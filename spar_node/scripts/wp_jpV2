#!/usr/bin/env python3

from argparse import ArgumentError
import sys
from math import *
import numpy as np
import rospy
import actionlib

from std_msgs.msg import UInt8
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Point, PoseStamped
from visualization_msgs.msg import Marker
from nav_msgs.msg import Path
from spar_msgs.msg import FlightMotionAction, FlightMotionGoal
from vision_msgs.msg import ObjectHypothesisWithPose

# Libraries for interfacing with BreadCrumb
from breadcrumb.srv import RequestPath
from breadcrumb.srv import RequestPathRequest

class Guidance():
	def __init__(self, waypoints, surveyAltitude):
		self.surveyAltitude = surveyAltitude
		# Make sure we have a valid waypoint list
		# Safe boundary values, default to X<2,Y<2,Z<2.
		self.safeRangeX = rospy.get_param("~safeRangeX", 2)
		self.safeRangeY = rospy.get_param("~safeRangeY", 2)
		self.safeRangeZ = rospy.get_param("~safeRangeZ", 2) 

		if not self.check_waypoints(waypoints):
			raise ArgumentError("Invalid waypoint list input!")

		# Internal counter to see what waypoint were are up to
		self.nextWaypointIndex = 0
		self.waypoint_counter = 0
		self.payload_id = 2

		#Aruco storage and landing logic
		#This will be checked to see if the drone has landed, before attempting a land and finishing the mission
		#logical checks for mission objecive completion
		self.completed_payload_1 = False
		self.completed_payload_2 = False
		self.completed_search = False
		self.mission_complete = False
		self.landed = False #Only triggered True at end of flight

		self.markers = np.full((101, 2), np.nan)
		######## HARD CODED LANDING MARKER ID AND COORDINATES ##########
		self.landing_marker = 3
		self.markers[self.landing_marker,:] = [1.8,1.8]
		

		#Create a publisher for payload commands
		self.pub_payload = rospy.Publisher('payloadcommands', UInt8, queue_size=2)

		# Set a flag to indicate that we are doing a specific inspection
		# and that we are not following our waypoint list
		# This will stop our "waypoint is reached" callback from firing
		# during the roi diversion and taking over our flight!
		self.performing_roi = False

		# Save the input waypoints
		self.waypoints = waypoints
		# Display the full path
		self.display_path(waypoints,"/guidance/fullPath")

		# Make some space to record down our current location
		self.current_location = Point()
		# Set our linear and rotational velocities for the flight
		self.vel_linear = rospy.get_param("~vel_linear", 0.8)
		self.vel_yaw = rospy.get_param("~vel_yaw", 0.8)
		# Set our position and yaw waypoint accuracies
		self.accuracy_pos = rospy.get_param("~acc_pos", 0.1)
		self.accuracy_yaw = rospy.get_param("~acc_yaw", 0.1)
		# Get survey altitude
		self.surveyAltitude = rospy.get_param("~surveyAlt", 1)

		# Create our action client
		action_ns = rospy.get_param("~action_topic", 'spar/flight')
		self.spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
		rospy.loginfo("Waiting for spar...")
		self.spar_client.wait_for_server()

		# Wait to connect with Breadcrumb (Warning, you code might get stuck in here if breadcrumb is not running)
		# Code will error if you try to connect to a service
		# that does not exist
		
		##########BREADCRUMB DEACTIVATED ####################################################################################
		#rospy.wait_for_service('/breadcrumb/request_path')
		#self.srvc_bc = rospy.ServiceProxy('/breadcrumb/request_path', RequestPath)

		if not rospy.is_shutdown():
			# Good to go, start mission
			rospy.loginfo("Starting waypoint mission")

			# Setup first waypoint segment
			# XXX:	Another option would be to do "takeoff" and leave "nextWaypointIndex = 0" to
			#		begin the mission at the first waypoint after take-off
			rospy.loginfo("Doing first waypoint / maybe takeoff")
			self.send_wp(self.waypoints[0])
			self.nextWaypointIndex += 1
			# Initialisation breadcrumb waypoints
			self.breadcrumbWPSnextIndex = 0
			self.breadcrumbMode = False
			self.breadcrumbWPS = []

			# Setup a timer to check if our waypoint has completed at 20Hz
			rospy.loginfo("Setting callbacks")
			self.timer = rospy.Timer( rospy.Duration(1.0/20.0), self.check_waypoint_status )
			# Callback to save "current location" such that we can perform and return
			# from a diversion to the correct location
			# XXX: These topics could be hard-coded to avoid using a launch file
			self.sub_pose = rospy.Subscriber("~pose", PoseStamped, self.callback_pose)
			# Subscriber to catch "ROI" diversion commands
			self.sub_roi = rospy.Subscriber("/target_detection/roi", PoseStamped, self.callback_inspect_roi)
			# Subscriber for ArUco Marker Detection
			self.sub_aruco = rospy.Subscriber('/target_detection/roi', ObjectHypothesisWithPose, self.callback_aruco_marker)
			# Subscriber for target Detection (Only Recieves info if target is found)
			self.sub_target = rospy.Subscriber("/depthai_node/target_localisation", ObjectHypothesisWithPose, self.callback_target_detection)
			# Publish marker info to the GCS
			self.marker_pub = rospy.Publisher("/visualization_marker", Marker, queue_size=2, latch=True)

			# XXX: Could have a publisher to output our waypoint progress
			# throughout the flight (should publish each time the waypoint
			# counter is increased). Note: will also need to import "Float32"
			# from "std_msgs.msg" in the header
			# self.pub_progress = rospy.Subscriber("~waypoint_progress", Float32, 10)

			# If shutdown is issued (eg. CTRL+C), cancel current
	 		# mission before rospy is shutdown.
			rospy.loginfo("Running callbacks while not shutdown...")
			rospy.on_shutdown( lambda : self.shutdown() )

	def check_waypoints(self, wps):
		# This function will check if a list of waypoints is in the format we expect

		# Make sure waypoints are a list
		if not isinstance(wps, list):
			rospy.logwarn("Waypoints are not list")
			return False

		# Make sure we have at least one waypoint
		if len(wps) < 1:
			rospy.logwarn("Waypoints list is empty")
			return False

		# Check each of our waypoints
		for i in range(len(wps)):
			if not self.check_waypoint(wps[i]):
				rospy.logwarn("Waypoint %i did not pass check" % (i + 1))
				return False

		# If we haven't returned false yet, then waypoints look good!
		return True

	def check_waypoint(self, wp):
		# This function will check if a waypoint is in the format we expect
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False

		# Check if the waypoint is inside the net for X, Y and Z:
		if abs(wp[0]) > self.safeRangeX or abs(wp[1]) > self.safeRangeY or wp[2] > self.safeRangeZ:
			rospy.logwarn("wp values x: {} - y: {} - z {}".format(wp[0], wp[1], wp[2]))
			rospy.logwarn("Waypoint has an invalid size for O134 (must be -{}<X<{}/-{}<Y<{}/Z<{}/Yaw)".format(self.safeRangeX,self.safeRangeX,self.safeRangeY,self.safeRangeY,self.safeRangeZ))
			return False

		# If we haven't returned false yet, then waypoint looks valid!
		return True

	def shutdown(self):
		# This function will make sure we shut down the node as safely as possible
		# Unregister anything that needs it here
		rospy.loginfo("Unregistering topics and shuting down...")
		self.sub_pose.unregister()
		self.sub_roi.unregister()
		self.spar_client.cancel_goal()

		rospy.loginfo("Guidance stopped")

	def callback_pose(self, msg_in):
		# This function will check receive the current pose of the UAV constantly
		# Store the current position at all times so it can be accessed later
		# rospy.loginfo("Updating Pose UAV...")
		self.current_location = msg_in.pose.position

	def callback_aruco_marker(self, msg_in):
		# Callback function for determining the location of the ArUco marker for landing
		# Only run ArUco detection if the UAV is at the desired flight height (Reached the first waypoint, and not performing ROI tasks)
		if self.reached_wp_1 and not self.performing_roi:
			if not self.aruco_found:
				rospy.loginfo('ArUco Found!')
				# Store the first ArUco marker, regardless of ID
				if self.id == -1:
					aruco_location = self.aruco_frame_translation([msg_in.frame_x, msg_in.frame_y])
					rospy.loginfo(f'UAV Location at x: {self.current_location.x}, y: {self.current_location.y}')
					rospy.loginfo(f'ArUco Marker {msg_in.id} Detected at x: {aruco_location[0]}, y: {aruco_location[1]}')
					# Update the landing location to the current loation when an ArUco marker is found
					#self.landing_wp = [self.current_location.x, self.current_location.y, surveyAltitude, pi]
					## Change if aruco location is outputted correctly above
					self.landing_wp = [aruco_location[0], aruco_location[1], self.surveyAltitude, pi]
					self.aruco_found = True
				elif msg_in.id == self.id:
					aruco_location = self.aruco_frame_translation([msg_in.frame_x, msg_in.frame_y])
					rospy.loginfo(f'UAV Location at x: {self.current_location.x}, y: {self.current_location.y}')
					rospy.loginfo(f'ArUco Marker {msg_in.id} Detected at x: {aruco_location[0]}, y: {aruco_location[1]}')
					# Update the landing location to the current loation when an ArUco marker is found
					# self.landing_wp = [self.current_location.x, self.current_location.y, surveyAltitude, pi]
					## Change if aruco location is outputted correctly above
					self.landing_wp = [aruco_location[0], aruco_location[1], self.surveyAltitude, pi]
					self.aruco_found = True

	def callback_target_detection(self, msg_in):
		
		# Callback function for target detection
		# Only run target detection if the UAV is at the desired flight height (Reached the first waypoint, and not performing ROI tasks)
		if self.reached_wp_1 and not self.performing_roi:	
			if msg_in.id == 1: # Target is the astronaut
				if not self.med_drop: # Only call this functionality on the first observation of the astronaut
					astronaut_location = msg_in.frame_x, msg_in.frame_y
					rospy.loginfo(f'Target Found at x: {astronaut_location[0]}, y: {astronaut_location[1]}!')
					rospy.loginfo('Target is the astronaut')
					self.med_drop = True
					self.publish_marker_person(astronaut_location) # Publish a marker to RViz at the current UAV location
					self.publish_espeak(msg_in.id, astronaut_location) # Call the espeak at the target location
					# self.inspect_roi(msg_in.id, [-1, -1]) # Call the ROI at a set location (-1, -1) CHANGE THIS LOCATION LATER
					## Change if the target location is outputted correctly
					self.inspect_roi(msg_in.id, astronaut_location) # Call the ROI at the target location

			elif msg_in.id == 0: # Target is the Backpack
				if not self.tracker_drop: # Only call this functionality on the first observation of the backpack
					backpack_location = msg_in.frame_x, msg_in.frame_y
					rospy.loginfo(f'Target Found at x: {backpack_location[0]}, y: {backpack_location[1]}!')
					rospy.loginfo('Target is the backpack')
					self.tracker_drop = True
					self.publish_marker_backpack(backpack_location) # Publish a marker to RViz at the current UAV location
					self.publish_espeak(msg_in.id, backpack_location) # Call the espeak at the target location
					# self.inspect_roi(msg_in.id, [1, 1]) # Call the ROI at a set location (1, 1) CHANGE THIS LOCATION LATER
					## Change if the target location is outputted correctly
					self.inspect_roi(msg_in.id, backpack_location) # Call the ROI at the target location
			else:
				rospy.loginfo('Unknown Target')

	## PUBLISHER FUNCTIONS
	def publish_espeak(self, id, location):
		# Function for publishing e-speak data to the GCS
		msg_out = ObjectHypothesisWithPose()
		msg_out.id = id
		msg_out.frame_x = location[0] # This is actually the world x coordinate, not frame
		msg_out.frame_y = location[1] # This is actually the world y coordinate, not frame
		self.espeak_pub.publish(msg_out)

	def publish_marker_person(self, target_location):
		# Publish Person Marker to RViz (CHANGE LOCATION OF MARKER)
		# Set up the message header
		msg_out = Marker()
		msg_out.header.frame_id = "map"
		msg_out.header.stamp = rospy.Time.now()

		# Namespace allows you to manage
		# adding and modifying multiple markers
		msg_out.ns = 'Person'
		# ID is the ID of this specific marker
		msg_out.id = 0
		# Type can be most primitive shapes
		# and some custom ones (see rviz guide
		# for more information)
		msg_out.type = Marker.CYLINDER
		# Action is to add / create a new marker
		msg_out.action = Marker.ADD
		# Lifetime set to Time(0) will make it
		# last forever
		msg_out.lifetime = rospy.Time(0)
		# Frame Locked will ensure our marker
		# moves around relative to the frame_id
		# if this is applicable
		msg_out.frame_locked = True

		# Place the marker at the current UAV horizontal position, and at a height of 0m (On the ground) 
		# UPDATE THIS WITH LOCALISATION
		msg_out.pose.position.x = target_location[0]
		msg_out.pose.position.y = target_location[1]
		msg_out.pose.position.z = 0.0
		msg_out.pose.orientation.w = 1.0
		msg_out.pose.orientation.x = 0.0
		msg_out.pose.orientation.y = 0.0
		msg_out.pose.orientation.z = 0.0

		# Adjust the scale of the marker to be a cylinder of height 0.5m
		# and diameter 0.2m
		msg_out.scale.x = 0.2
		msg_out.scale.y = 0.2
		msg_out.scale.z = 0.5

		# Make the cylinder a bronze colour (same as the IRL object)
		msg_out.color.r = (112/255)
		msg_out.color.g = (45/255)
		msg_out.color.b = (7/255)
		msg_out.color.a = 1.0

		# Publish the marker
		rospy.loginfo('Publishing Person Marker')
		self.marker_pub.publish(msg_out)

	def publish_marker_backpack(self, target_location):
		# Publish Backpack Marker to RViz (CHANGE LOCATION OF MARKER)
		# Set up the message header
		msg_out = Marker()
		msg_out.header.frame_id = "map"
		msg_out.header.stamp = rospy.Time.now()

		# Namespace allows you to manage
		# adding and modifying multiple markers
		msg_out.ns = 'Backpack'
		# ID is the ID of this specific marker
		msg_out.id = 0
		# Type can be most primitive shapes
		# and some custom ones (see rviz guide
		# for more information)
		msg_out.type = Marker.CUBE
		# Action is to add / create a new marker
		msg_out.action = Marker.ADD
		# Lifetime set to Time(0) will make it
		# last forever
		msg_out.lifetime = rospy.Time(0)
		# Frame Locked will ensure our marker
		# moves around relative to the frame_id
		# if this is applicable
		msg_out.frame_locked = True

		# Place the marker at the current UAV horizontal position, and at a height of 0m (On the ground) 
		# UPDATE THIS WITH LOCALISATION
		msg_out.pose.position.x = target_location[0]
		msg_out.pose.position.y = target_location[1]
		msg_out.pose.position.z = 0.0
		msg_out.pose.orientation.w = 1.0
		msg_out.pose.orientation.x = 0.0
		msg_out.pose.orientation.y = 0.0
		msg_out.pose.orientation.z = 0.0

		# Make a rectangle tile marker with
		# size 0.2x0.3m square and 0.1m high
		msg_out.scale.x = 0.2
		msg_out.scale.y = 0.3
		msg_out.scale.z = 0.1

		# Make the tile a bright orange (same as the IRL object)
		msg_out.color.r = (250/255)
		msg_out.color.g = (95/255)
		msg_out.color.b = (5/255)
		msg_out.color.a = 1.0

		# Publish the marker
		rospy.loginfo('Publishing Backpack Marker')
		self.marker_pub.publish(msg_out)
			
	def callback_inspect_roi(self, msg_in):
	# This function will fire whenever a ROI pose message is sent
	# It is also responsible for handling the ROI "inspection task"
		# Set our flag that we are performing the diversion
		self.performing_roi = True

		rospy.loginfo("Starting diversion to ROI...")
		# Cancel the current goal (if there is one)
		self.spar_client.cancel_goal()
		# Record our current location so we can return to it later
		start_location = self.current_location
		# XXX:	It would also be a good idea to capture "current yaw" from
		#		the pose to maintain that throughout a diversion

		# Set the "diversion waypoint" (at yaw zero)
		# dwp = [msg_in.pose.position.x, msg_in.pose.position.y, msg_in.pose.position.z, 0.0]
		dwp = [msg_in.pose.position.x, msg_in.pose.position.y, self.current_location.z, 0.0]
		# Set the "return waypoint" (at yaw zero)
		rwp = [self.current_location.x, self.current_location.y, self.current_location.z, 0.0]

		# XXX: Could pause here for a moment with ( "rospy.sleep(...)" ) to make sure the UAV stops correctly

		self.send_wp(dwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		rospy.loginfo("Reached diversion ROI!")
		# CODE FOR HOVER AND PAYLOAD DEPLOYMENT

		rospy.sleep(rospy.Duration(6))
		
		#self.payload_id = UInt8()
		self.payload_id = UInt8(self.payload_id)
		rospy.loginfo(f"Sending payload deployment {self.payload_id.data}")
		self.pub_payload.publish(self.payload_id.data)
		# 2 seconds to deploy payload
		# NOTE THIS IS TO BE REPLACED WITH A CONFIRMATION MESSAGE FROM PAYLOAD DEPLOYMENT
		rospy.sleep(rospy.Duration(2))
		rospy.loginfo("Returning to flight plan...")

		self.send_wp(rwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		# "nextWaypointIndex" represents the "next waypoint"
		# "nextWaypointIndex - 1" represents the "current waypoint"
		rospy.loginfo("Resuming flight plan from waypoint %i!" % (self.nextWaypointIndex - 1))
		self.send_wp(self.waypoints[self.nextWaypointIndex - 1])
		# Unset our flag that we are performing a diversion
		# to allow the waypoint timer to take back over
		self.performing_roi = False

	def detection_aruco(self,msg_in):
		#Aruco marker detection handling
		#This function is called by the aruco detection node/topic
		#It will store the detected aruco marker and its position
		#!NOTE !!!!!!position z is being used to store the marker id
		
		#Store the detected marker position in the marker array (row index -1 matches the marker ID)
		self.markers[msg_in.position.z-1,0] = msg_in.pose.position.x
		self.markers[msg_in.position.z-1,1] = msg_in.pose.position.y

	def send_wp(self, wp):
		# This function is for convinience to simply send out a new waypoint
		# Make sure the waypoint is valid before continuing
		if not self.check_waypoint(wp):
			rospy.logwarn("Invalid waypoint, skipped...")
			return False
			# raise ArgumentError("Invalid waypoint input!")

		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_GOTO
		goal.position.x = wp[0]
		goal.position.y = wp[1]
		goal.position.z = wp[2]
		goal.yaw = wp[3]
		goal.velocity_vertical = self.vel_linear
		goal.velocity_horizontal = self.vel_linear
		goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.accuracy_pos
		goal.yaw_range = self.accuracy_yaw

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.send_goal(goal)
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())

	def check_waypoint_status(self, te):
		# This function will fire whenever we recieve a timer event (te) from rospy.Timer()
		# The main purpose is to check if a waypoint has been reached,
		# and if so, send out the next waypoint to continue the mission

		# # If we're performing the ROI diversion, then don't do
		# # anything here, as this is handled in that function
		# if not self.performing_roi:
		# 	# If the last segment has succeeded.
		# 	# For more complex tasks, it might be necessary to also
		# 	# check if you are in waypoint or breadcrum mode.
		# 	# Hint: really, we should check for other status states
		# 	#		(such as aborted), as there are some states
		# 	#		where we won't recover from, and should just exit
		# 	if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
		# 		rospy.loginfo("Reached waypoint %i!" % (self.nextWaypointIndex))

		# 		# XXX:	Another check could go here to finish the mission early
		# 		#		if "all" inspection tasks have been completed
		# 		#		(Add in another "if" and make the waypoint counter check
		# 		#		 an "elif" check instead.
		# 		#		 i.e. if complete; elif more wps; else wps finished)
		# 		if self.nextWaypointIndex < (len(self.waypoints)):

		# 			if not self.breadcrumbMode:
		# 				# Set up a path request for breadcrumb
		# 				req = RequestPathRequest()
		# 				req.start.x = self.waypoints[self.nextWaypointIndex-1][0] # Get X
		# 				req.start.y = self.waypoints[self.nextWaypointIndex-1][1] # Get Y
		# 				req.start.z = self.waypoints[self.nextWaypointIndex-1][2] # Get Z
		# 				req.end.x = self.waypoints[self.nextWaypointIndex][0]	# Get next X
		# 				req.end.y = self.waypoints[self.nextWaypointIndex][1]	# Get next Y
		# 				req.end.z = self.waypoints[self.nextWaypointIndex][2]	# Get next Z

		# 				res = self.srvc_bc(req)
						
		# 				# Breadcrumb will return a vector of poses if a solution was found
		# 				# If no solution was found (i.e. no solution, or request bad
		# 				# start/end), then breadcrumb returns and empty vector
		# 				# XXX: You could also use res.path_sparse (see breadcrumb docs)
		# 				breadcrumbWPS = []
		# 				if len(res.path_sparse.poses) > 0:
		# 					# Print the path to the screen
		# 					rospy.loginfo("Segment {}-1 to {}:".format(self.nextWaypointIndex,self.nextWaypointIndex))
		# 					rospy.loginfo("[%0.2f;%0.2f;%0.2f] => [%0.2f;%0.2f;%0.2f]",
		# 								req.start.x,req.start.y,req.start.z,
		# 								req.end.x,req.end.y,req.end.z)

		# 					# Loop through the solution returned from breadcrumb
		# 					for i in range(len(res.path_sparse.poses)):
		# 						rospy.loginfo("    [%0.2f;%0.2f;%0.2f]",
		# 									res.path_sparse.poses[i].position.x,
		# 									res.path_sparse.poses[i].position.y,
		# 									res.path_sparse.poses[i].position.z)
		# 						breadcrumbWPS.append([res.path_sparse.poses[i].position.x, res.path_sparse.poses[i].position.y, res.path_sparse.poses[i].position.z, 0.0])

		# 					# Display the path
		# 					# print(breadcrumbWPS)
		# 					self.breadcrumbWPS = breadcrumbWPS
		# 					self.display_path(breadcrumbWPS,"/guidance/pathBreadcrum")
		# 					self.breadcrumbMode = True
		# 					self.breadcrumbWPSnextIndex = 0
		# 					self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
		# 					self.breadcrumbWPSnextIndex +=1 

		# 				else:
		# 					rospy.logerr("solution not found")

		# 			else:
		# 				if self.breadcrumbWPSnextIndex < (len(self.breadcrumbWPS)):
		# 					# We got here a breadcrumb path, we should exuted down here:
		# 					self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
		# 					# Increment our waypoint counter
		# 					self.breadcrumbWPSnextIndex +=1
		# 				else:
		# 					# If we finish with the breadcrumb waypoints we increase normal waypoints
		# 					self.nextWaypointIndex += 1
		# 					self.breadcrumbMode = False
		# 		else:
		# 			# Else the mission is over, shutdown and quit the node
		# 			# XXX:	This could be used to restart the mission back to the
		# 			#		first waypoint instead to restart the mission
		# 			rospy.loginfo("Mission complete!")
		# 			rospy.signal_shutdown("Complete, Wooh!")
		# 	elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
		# 		rospy.loginfo("Mission cancelled!")
		# 		rospy.signal_shutdown("cancelled")


		# If we're performing the ROI diversion, then don't do
		# anything here, as this is handled in that function
		if not self.performing_roi:
			# If the last segment has succeeded.
			# For more complex tasks, it might be necessary to also
			# check if you are in waypoint or diversion mode here.
			# Hint: really, we should check for other status states
			#		(such as aborted), as there are some states
			#		where we won't recover from, and should just exit
			if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				rospy.loginfo("Reached waypoint %i!" % (self.waypoint_counter))

				# XXX:	Another check could go here to finish the mission early
				#		if "all" inspection tasks have been completed
				#		(Add in another "if" and make the waypoint counter check
				#		 an "elif" check instead.
				#		 i.e. if complete; elif more wps; else wps finished)
				if self.waypoint_counter < (len(self.waypoints)):
					self.send_wp(self.waypoints[self.waypoint_counter])
					# Increment our waypoint counter
					self.waypoint_counter += 1
					# if self.waypoint_counter == (len(self.waypoints)) and self.completed_payload_1 and self.completed_payload_2:
					# 	file=2
				elif not (self.waypoint_counter < (len(self.waypoints))) and not self.mission_complete:
					print(self.waypoint_counter < (len(self.waypoints)) and not self.mission_complete)
					self.land_xy()
					

					

				else:
					# Else the mission is over, shutdown and quit the node
					# XXX:	This could be used to restart the mission back to the
					#		first waypoint instead to restart the mission
					rospy.loginfo("Mission complete!")
					rospy.signal_shutdown("complete")
			elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
				rospy.loginfo("Mission cancelled!")
				rospy.signal_shutdown("cancelled")

	def display_path(self, wps, name):
		# Display a path
		rospy.loginfo("Displaying path...")
		pub_path = rospy.Publisher(name, Path, queue_size=10, latch=True)
		msg = Path()
		msg.header.frame_id = "/map"
		msg.header.stamp = rospy.Time.now()
	
		for wp in wps:
			pose = PoseStamped()
			pose.pose.position.x = wp[0]
			pose.pose.position.y = wp[1]
			pose.pose.position.z = wp[2]
	
			pose.pose.orientation.w = 1.0
			pose.pose.orientation.x = 0.0
			pose.pose.orientation.y = 0.0
			pose.pose.orientation.z = 0.0
	
			msg.poses.append(pose)
		rospy.loginfo("Publishing path...")
		pub_path.publish(msg)

	def land_xy(self):
		
		#Check that the Aruco landing marker has been discovered, if not set default landing coordinate 0,0
		if np.isnan(self.markers[self.landing_marker,0]) or np.isnan(self.markers[self.landing_marker,1]) == np.nan:
			self.landing_wp = [0,0]
			rospy.loginfo("Aruco marker %i not found: using default location [%i,%i]!" % (self.landing_marker,self.landing_wp[0], self.landing_wp[1]))
		else:
			self.landing_wp = [self.markers[self.landing_marker,0],self.markers[self.landing_marker,1],1,1]
			rospy.loginfo("Landing at Aruco marker %i: location [%i,%i]!" % (self.landing_marker, self.landing_wp[0], self.landing_wp[1]))
			self.landring_wp = [self.markers[self.landing_marker,0],self.markers[self.landing_marker,1],1,0]
		rospy.loginfo("Landing at Aruco marker : location " % (self.landing_wp))
		self.mission_complete = True
		self.send_wp(self.landing_wp)

def main(args):
	# Initialise ROS
	rospy.init_node('guidance')
	surveyAltitude = rospy.get_param("~surveyAlt", 1)
	# List of waypoints
	surveyAltitude = 1.8
	# [X, Y, Z, Yaw]
	wpsR1 = [[ 0.0, 0.0, surveyAltitude, 0.0],
		   [ 1.0, 1.0, surveyAltitude, 0.0],
		   [-1.0, 1.0, surveyAltitude, 0.0],
		   [-1.0,-1.0, surveyAltitude, 0.0],
		   [ 1.0,-1.0, surveyAltitude, 0.0],
		   [ -1.8, -1.8, surveyAltitude, 0.0]]

	wpsR2 = [[ 0.0, 0.0, surveyAltitude*2, 0.0],
		   [ 1.0, 1.0, surveyAltitude*2, 0.0],
		   [-1.0, 1.0, surveyAltitude*2, 0.0],
		   [-1.0,-1.0, surveyAltitude*2, 0.0],
		   [ 1.3,-1.0, surveyAltitude*2, 0.0],
		   [ 1.3,1.0, surveyAltitude*2, 0.0],
		   [ 1.0,-1.0, surveyAltitude*2, 0.0],
		   [ 0.0, 0.0, surveyAltitude*2, 0.0]]

	if surveyAltitude > 1.5:
		wps = wpsR1
	else:
		wps = wpsR2
	# wps = [[-4.0, 2.5, 1.5, 0.0],    # 1  r1
    #        [-4.0,-2.5, 1.5, 0.0],    # 2  r1
    #        [-2.5,-2.5, 1.5, 0.0],    # 3  r2
    #        [-2.5, 2.5, 1.5, 0.0],    # 4  r2
    #        [-1.5, 2.5, 1.5, 0.0],    # 5  r3
    #        [-1.5,-2.5, 1.5, 0.0],    # 6  r3
    #        [-0.5,-2.5, 1.5, 0.0],    # 7  r4
    #        [-0.5, 2.5, 1.5, 0.0],    # 8  r4
    #        [ 0.5, 2.5, 1.5, 0.0],    # 9  r5
    #        [ 0.5,-2.5, 1.5, 0.0],    # 10 r5
    #        [ 1.5,-2.5, 1.5, 0.0],    # 11 r6
    #        [ 1.5, 2.5, 1.5, 0.0],    # 12 r6
    #        [ 2.5, 2.5, 1.5, 0.0],    # 13 r7
    #        [ 2.5,-2.5, 1.5, 0.0],    # 14 r7
    #        [ 4.0,-2.5, 1.5, 0.0],    # 15 r8
    #        [ 4.0, 2.5, 1.5, 0.0]]    # 16 r8

	# Create our guidance class option
	guide = Guidance(wps, surveyAltitude)
	
	

	# Spin!
	rospy.spin()

if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('Node Closed')
