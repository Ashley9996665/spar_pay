#import Libraries
from gpiozero import Servo
from gpiozero import AngularServo
import time
import rospy
from std_msgs.msg import UInt8
#
#
servo_pin = 12 # Change this to pin of choice (within reason)
#
#Set Pin X as am ouput and set servo one as pin X as PWM
servo = AngularServo(servo_pin, min_angle=0, max_angle=180, min_pulse_width=0.00005, max_pulse_width=0.0025) #GPIO 12
#
#
#after the unit testing, the duty cycle of the DF9GMS is between 2 and 12
# therefor, 2 is 0 degrees. 12 is 180 degrees of the duty cycle
#


def start_position():
    rospy.loginfo("Awaiting message...")
    servo.angle = 90
    time.sleep(2)
#
#to drop the left payload, we want the motor to rotate to the right (180 deg or dutycycle 12)
def drop_left():
    servo.angle = 20
    time.sleep(2)
    servo.angle = 90
    time.sleep(2)
#
#to drop the left payload, we want the motor to rotate to the right (0 deg or dutycycle 2)
def drop_right():
    servo.angle = 160
    time.sleep(2)
    servo.angle = 90
    time.sleep(2)
#
#Test Code 
def test_code():
    start_position()
    print ("wait 2 seconds")
    time.sleep(2)
    print ("drop left")
    drop_left()
    print ("drop right")
    drop_right()
#
#
servo.angle = 90
#
def callback(msg):
    rospy.loginfo("Message received")
    #Payload command key
    #Original position: 0b00000000 (0)
    #Drop Epi pen:      0b00000001 (1)
    #Drop Tracker:      0b00000010 (2)
    #Drop Cube:         0b00000011 (3)
    #Drop Rectangle:    0b00000100 (4)
    # if msg.data == 0:
        #start_position()
       # rospy.sleep(rospy.Duration(3))
#
    if msg.data == 1:
        servo.angle = 20
        rospy.sleep(rospy.Duration(3))
        servo.angle = 90
        rospy.loginfo("Epi-Pen was deployed")
#    
    elif msg.data == 2:
        servo.angle = 160
        rospy.sleep(rospy.Duration(3))
        servo.angle = 90
        rospy.loginfo("Tracker was deployed")
    else:
        servo.angle = 90
#
def main():
    # Initialize ROS node
    rospy.init_node('servo_controller_node')
    rospy.loginfo("Payload Setup")
    #
    # Subscribe to payloadcommands topic
    
    rospy.Subscriber('payloadcommands', UInt8, callback)
    rospy.loginfo("Message acted on")
    #
    # Keep the node alive
    rospy.spin()
#
if __name__ == '__main__':
    main()
